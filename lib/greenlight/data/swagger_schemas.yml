# Following is {json:api} schema definition in a form suitable for $ref usage
# Taken from http://www.columbia.edu/~alan/schemas/common/jsonapi.yaml
JSONAPIresponse:
  oneOf:
    - $ref: "#/components/schemas/success"
    - $ref: "#/components/schemas/failure"
    - $ref: "#/components/schemas/info"
success:
  type: object
  required:
    - data
  properties:
    data:
      $ref: "#/components/schemas/data"
    included:
      description: >-
        To reduce the number of HTTP requests, servers **MAY** allow
        responses that include related resources along with the requested
        primary resources. Such responses are called `compound documents`.
      type: array
      items:
        $ref: "#/components/schemas/resource"
      uniqueItems: true
    meta:
      $ref: "#/components/schemas/meta"
    links:
      description: Link members related to the primary data.
      allOf:
        - $ref: "#/components/schemas/links"
        - $ref: "#/components/schemas/pagination"
    jsonapi:
      $ref: "#/components/schemas/jsonapi"
  additionalProperties: false
failure:
  type: object
  required:
    - errors
  properties:
    errors:
      type: array
      items:
        $ref: "#/components/schemas/error"
      uniqueItems: true
    meta:
      $ref: "#/components/schemas/meta"
    jsonapi:
      $ref: "#/components/schemas/jsonapi"
    links:
      $ref: "#/components/schemas/links"
  additionalProperties: false
info:
  type: object
  required:
    - meta
  properties:
    meta:
      $ref: "#/components/schemas/meta"
    links:
      $ref: "#/components/schemas/links"
    jsonapi:
      $ref: "#/components/schemas/jsonapi"
  additionalProperties: false
onlymeta:
  properties:
    meta:
      $ref: "#/components/schemas/meta"
  additionalProperties: false
meta:
  description: >-
    Non-standard meta-information that can not be represented as an
    attribute or relationship.
  type: object
  additionalProperties: true
data:
  description: >-
    The document's `primary data` is a representation of the resource or
    collection of resources targeted by a request.
  oneOf:
    - $ref: "#/components/schemas/resource"
    - description: >-
        An array of resource objects, an array of resource identifier
        objects, or an empty array ([]), for requests that target resource
        collections.
      type: array
      items:
        $ref: "#/components/schemas/resource"
      uniqueItems: true
    - $ref: "#/components/schemas/nulltype"
post_datum:
  description: >-
    singular item being [created](https://jsonapi.org/format/#crud-creating).
    `id` is optional and may be ignored if supplied and created by the system.
  properties:
    data:
      $ref: "#/components/schemas/post_resource"
datum:
  description: singular item
  properties:
    data:
      $ref: "#/components/schemas/resource"
resource:
  description: Resource objects appear in a JSON API document to represent resources.
  type: object
  required:
    - type
    - id
  properties:
    type:
      $ref: "#/components/schemas/type"
    id:
      $ref: "#/components/schemas/id"
    attributes:
      $ref: "#/components/schemas/attributes"
    relationships:
      $ref: "#/components/schemas/relationships"
    links:
      $ref: "#/components/schemas/links"
    meta:
      $ref: "#/components/schemas/meta"
  additionalProperties: false
# unfortunately $ref resource and tring to change required doesn't work.
post_resource:
  description: A POSTable resource object has an optional id.
  type: object
  required:
    - type
  properties:
    type:
      $ref: "#/components/schemas/type"
    id:
      $ref: "#/components/schemas/id"
    attributes:
      $ref: "#/components/schemas/attributes"
    relationships:
      $ref: "#/components/schemas/relationships"
    # not clear what it means to try to POST links but the spec says POST a Resource Object...
    links:
      $ref: "#/components/schemas/links"
    meta:
      $ref: "#/components/schemas/meta"
  additionalProperties: false
relationshipLinks:
  description: >-
    A resource object **MAY** contain references to other resource objects
    (`relationships`). Relationships may be to-one or to-many. Relationships
    can be specified by including a member in a resource's links object.
  type: object
  properties:
    self:
      description: >-
        A `self` member, whose value is a URL for the relationship itself (a
        `relationship URL`). This URL allows the client to directly
        manipulate the relationship. For example, it would allow a client to
        remove an `author` from an `article` without deleting the people
        resource itself.
      $ref: "#/components/schemas/link"
    related:
      $ref: "#/components/schemas/link"
  additionalProperties: true
links:
  type: object
  additionalProperties:
    $ref: "#/components/schemas/link"
link:
  description: >-
    A link **MUST** be represented as either: a string containing the link's
    URL or a link object.
  oneOf:
    - description: A string containing the link's URL.
      type: string
      format: uri-reference
    - type: object
      required:
        - href
      properties:
        href:
          description: A string containing the link's URL.
          type: string
          format: uri-reference
        meta:
          $ref: "#/components/schemas/meta"
attributes:
  description: >-
    Members of the attributes object (`attributes`) represent information
    about the resource object in which it's defined.
  type: object
  # properties:
  #   ^(?!relationships$|links$|id$|type$)\w[-\w_]*$:
  #     type: object
  #     description: Attributes may contain any valid JSON value.
  additionalProperties: false
# TODO: This validates rather than defines:
relationships:
  description: >-
    Members of the relationships object represent
    references from the resource object in which it's defined to other
    resource objects. N.B. this is validation, not useful for inclusion.
  type: object
  # properties:
  #   ^(?!id$|type$)\w[-\w_]*$:
  #     $ref: "#/components/schemas/relationship"
  additionalProperties:
    $ref: "#/components/schemas/relationship"
relationship:
  description: A single relationship description
  type: object
  properties:
    links:
      $ref: "#/components/schemas/relationshipLinks"
    data:
      description: Member, whose value represents `resource linkage`.
      oneOf:
        - $ref: "#/components/schemas/relationshipToOne"
        - $ref: "#/components/schemas/relationshipToMany"
    meta:
      $ref: "#/components/schemas/meta"
  anyOf:
    - required:
        - data
    - required:
        - meta
    - required:
        - links
  additionalProperties: false
relationshipToOne:
  description: >-
    References to other resource objects in a to-one (`relationship`).
    Relationships can be specified by including a member in a resource's
    links object.
  anyOf:
    - $ref: "#/components/schemas/empty"
    - $ref: "#/components/schemas/linkage"
reltoone:
  description: A singular relationship
  type: object
  properties:
    links:
      $ref: "#/components/schemas/relationshipLinks"
    data:
      $ref: "#/components/schemas/relationshipToOne"
    meta:
      $ref: "#/components/schemas/meta"
reltomany:
  description: A multiple relationship
  type: object
  properties:
    links:
      $ref: "#/components/schemas/relationshipLinks"
    data:
      $ref: "#/components/schemas/relationshipToMany"
    meta:
      $ref: "#/components/schemas/meta"
reltoonedata:
  description: A singular relationship, data only.
  type: object
  properties:
    data:
      $ref: "#/components/schemas/relationshipToOne"
reltomanydata:
  description: A multiple relationship, data only.
  type: object
  properties:
    data:
      $ref: "#/components/schemas/relationshipToMany"
relationshipToMany:
  description: >-
    An array of objects each containing `type` and `id` members for to-many
    relationships.
  type: array
  items:
    $ref: "#/components/schemas/linkage"
  uniqueItems: true
empty:
  $ref: "#/components/schemas/nulltype"
linkage:
  description: The `type` and `id` to non-empty members.
  type: object
  required:
    - type
    - id
  properties:
    type:
      type: string
    id:
      type: string
    meta:
      $ref: "#/components/schemas/meta"
  additionalProperties: false
pagination:
  type: object
  properties:
    first:
      description: The first page of data
      oneOf:
        - type: string
          format: uri-reference
        - $ref: "#/components/schemas/nulltype"
    last:
      description: The last page of data
      oneOf:
        - type: string
          format: uri-reference
        - $ref: "#/components/schemas/nulltype"
    prev:
      description: The previous page of data
      oneOf:
        - type: string
          format: uri-reference
        - $ref: "#/components/schemas/nulltype"
    next:
      description: The next page of data
      oneOf:
        - type: string
          format: uri-reference
        - $ref: "#/components/schemas/nulltype"
jsonapi:
  description: An object describing the server's implementation
  type: object
  properties:
    version:
      type: string
    meta:
      $ref: "#/components/schemas/meta"
  additionalProperties: false
error:
  type: object
  properties:
    id:
      description: A unique identifier for this particular occurrence of the problem.
      type: string
    links:
      $ref: "#/components/schemas/links"
    status:
      description: >-
        The HTTP status code applicable to this problem, expressed as a
        string value.
      type: string
    code:
      description: >-
        An application-specific error code, expressed as a string value.
      type: string
    title:
      description: >-
        A short, human-readable summary of the problem. It **SHOULD NOT**
        change from occurrence to occurrence of the problem, except for
        purposes of localization.
      type: string
    detail:
      description: >-
        A human-readable explanation specific to this occurrence of the
        problem.
      type: string
    source:
      type: object
      properties:
        pointer:
          description: >-
            A JSON Pointer [RFC6901] to the associated entity in the request
            document [e.g. `/data` for a primary data object, or
            `/data/attributes/title` for a specific attribute].
          type: string
        parameter:
          description: A string indicating which query parameter caused the error.
          type: string
    meta:
      $ref: "#/components/schemas/meta"
  additionalProperties: false
nulltype:
  description: OAS doesn't allow the null type so use this.
  type: object
  nullable: true
  default: null
id:
  type: string
  description: "[resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)"
type:
  type: string
  description: "[resource object type](https://jsonapi.org/format/#document-resource-object-identification)"
parameters:
include:
  name: include
  in: query
  description: "[list of included related resources](https://jsonapi.org/format/#fetching-includes)"
  required: false
  style: form
  schema:
    type: string
sort:
  name: sort
  in: query
  description: "[fields to sort by](https://jsonapi.org/format/#fetching-sorting)"
  required: false
  style: form
  schema:
    type: string
pageSize:
  name: "page[size]"
  in: query
  description: size of page for paginated results
  required: false
  schema:
    type: integer
    format: int32
pageNumber:
  name: "page[number]"
  in: query
  description: page number of results
  required: false
  schema:
    type: integer
    format: int32
pageLimit:
  name: "page[limit]"
  in: query
  description: limit for this page of paginated results
  required: false
  schema:
    type: integer
    format: int32
pageOffset:
  name: "page[offset]"
  in: query
  description: collection items offset for paginated results
  required: false
  schema:
    type: integer
    format: int32
# unable to properly represent fields and filters? swagger-edit appears to not implement this correctly.
fields:
  name: fields
  in: query
  description: "sparse fieldsets: `fields[TYPE]=field1,field2,...`"
  required: false
  style: deepObject
  schema:
    type: string
filter:
  name: filter
  in: query
  description: "filter[NAME]=value(s)"
  required: false
  style: deepObject
  schema:
    type: string
