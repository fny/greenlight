plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.72"
    id "org.jetbrains.kotlin.kapt" version "1.3.72"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.72"
    id "org.jetbrains.kotlin.plugin.noarg" version "1.3.72"
    id "groovy"
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id "application"
}

apply plugin: "kotlin-jpa"

version "0.1"
group "greenlight"

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    //region kotlin
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    //endregion
    
    //region micronaut
    kapt("io.micronaut.data:micronaut-data-processor:1.1.3")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa:1.1.3")
    
    kapt(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    
    kapt("io.micronaut:micronaut-inject-java:$micronautVersion")
    kaptTest("io.micronaut:micronaut-inject-java:$micronautVersion")
    kaptTest("io.micronaut:micronaut-inject-groovy:$micronautVersion")
    implementation("io.micronaut:micronaut-inject:$micronautVersion")
    
    kapt("io.micronaut.security:micronaut-security-annotations:2.0.0")
    
    kapt("io.micronaut:micronaut-validation:2.0.1")
    implementation("io.micronaut:micronaut-validation:2.0.1")

    
    implementation("io.micronaut.security:micronaut-security-jwt:2.0.0") {
//    exclude group: "io.micronaut", module: "http-server-netty"
//    exclude group: "io.micronaut", module: "http-client"
    }
    implementation("io.micronaut.views:micronaut-views-soy")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime:2.0.0")
    implementation("io.micronaut:micronaut-runtime:$micronautVersion")
    implementation("io.micronaut:micronaut-http-server-netty:$micronautVersion")
    implementation("io.micronaut:micronaut-http-client:$micronautVersion")
    implementation("io.micronaut.rxjava3:micronaut-rxjava3")
    implementation("io.micronaut:micronaut-management:$micronautVersion")
    implementation("io.micronaut.sql:micronaut-hibernate-jpa")
    
    runtime("io.micronaut.sql:micronaut-jdbc-hikari:3.0.0")
    testImplementation("io.micronaut.test:micronaut-test-spock:1.2.2")
    testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("io.micronaut:micronaut-inject-groovy:$micronautVersion")
    //endregion
    
    //region 3rd-party
    kapt("javax.persistence:javax.persistence-api:2.2")
    implementation("javax.annotation:javax.annotation-api:1.3.2")
    implementation("io.reactivex.rxjava3:rxjava:3.0.6")
    implementation("com.twilio.sdk:twilio:7.55.0")
    implementation("com.googlecode.libphonenumber:libphonenumber:8.12.9")
    
    implementation('org.postgresql:postgresql:42.2.16')
    implementation('com.google.guava:guava:29.0-jre')
    runtimeOnly("ch.qos.logback:logback-classic:1.2.3")
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")
    runtimeOnly("org.fusesource.jansi:jansi:1.18")
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    //endregion
}


run.classpath += configurations.developmentOnly
test.classpath += configurations.developmentOnly


mainClassName = "greenlight.Application"

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.toVersion('1.8')
}

allOpen {
    annotation("io.micronaut.aop.Around")
    annotation("javax.persistence.Entity")
    annotation("javax.persistence.MappedSuperclass")
    annotation("javax.persistence.Embeddable")
    annotation("io.micronaut.validation.Validated")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
    }
}

kapt {
    arguments {
        arg("micronaut.processing.incremental", false)
        arg("micronaut.processing.annotations", "greenlight.*")
        arg("micronaut.processing.group", "greenlight")
        arg("micronaut.processing.module", "core")
    }
    
    useBuildCache = true
}

shadowJar {
    mergeServiceFiles()
}

