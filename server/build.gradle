plugins {
  id "org.jetbrains.kotlin.jvm" version "1.3.72"
  id "org.jetbrains.kotlin.kapt" version "1.3.72"
  id "org.jetbrains.kotlin.plugin.allopen" version "1.3.72"
  id "groovy"
  id "com.github.johnrengelman.shadow" version "6.0.0"
  id "application"
}

version "0.1"
group "greenlight"

repositories {
  mavenCentral()
  jcenter()

}

configurations {
  // for dependencies that are needed for development only
  developmentOnly
}

dependencies {
  implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
  implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

  kapt(platform("io.micronaut:micronaut-bom:$micronautVersion"))
  kapt("io.micronaut:micronaut-inject-java:2.0.1")
  kaptTest("io.micronaut:micronaut-inject-java:2.0.1")
  kapt("io.micronaut.security:micronaut-security-annotations:2.0.0")
  kapt("javax.persistence:javax.persistence-api:2.2")
  kapt("io.micronaut.data:micronaut-data-processor:1.1.3")

  kaptTest("io.micronaut:micronaut-inject-groovy:$micronautVersion")
  implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
  implementation("io.micronaut:micronaut-inject")
  implementation("io.micronaut:micronaut-validation")
  implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
  implementation("io.micronaut:micronaut-runtime")
  implementation("io.micronaut:micronaut-http-server-netty")
  implementation("io.micronaut:micronaut-http-client")

  implementation("io.micronaut.rxjava3:micronaut-rxjava3")
  implementation("io.micronaut:micronaut-management")

  implementation("javax.annotation:javax.annotation-api:1.3.2")
  implementation("io.reactivex.rxjava3:rxjava:3.0.6")
  implementation("com.twilio.sdk:twilio:7.55.0")

  implementation("io.micronaut.sql:micronaut-hibernate-jpa")
  implementation("io.micronaut.data:micronaut-data-hibernate-jpa:1.1.3")
  implementation("io.micronaut.beanvalidation:micronaut-hibernate-validator:2.0.1")

  runtime("io.micronaut.sql:micronaut-jdbc-hikari")
  implementation('org.postgresql:postgresql:42.2.16')

  // for "live reload"
  developmentOnly("io.micronaut:micronaut-runtime-osx:2.0.1")
  developmentOnly("net.java.dev.jna:jna")
  developmentOnly("io.methvin:directory-watcher")

  runtimeOnly("ch.qos.logback:logback-classic")
  runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")

  testImplementation("io.micronaut.test:micronaut-test-spock:1.2.2")
  testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
  testImplementation("io.micronaut:micronaut-inject-groovy:$micronautVersion")
  testImplementation("org.spockframework:spock-core") {
//        exclude group: "org.codehaus.groovy", module: "groovy-all"
  }
}


run.classpath += configurations.developmentOnly
test.classpath += configurations.developmentOnly


mainClassName = "greenlight.Application"

// use JUnit 5 platform
test {
  useJUnitPlatform()
}

java {
  sourceCompatibility = JavaVersion.toVersion('1.8')
}

allOpen {
  annotation("io.micronaut.aop.Around")
}

compileKotlin {
  kotlinOptions {
    jvmTarget = '1.8'
    //Will retain parameter names for Java reflection
    javaParameters = true
  }
}

compileTestKotlin {
  kotlinOptions {
    jvmTarget = '1.8'
    javaParameters = true
  }
}

kapt {
  arguments {
    arg("micronaut.processing.incremental", false)
    arg("micronaut.processing.annotations", "greenlight.*")
    arg("micronaut.processing.group", "greenlight")
    arg("micronaut.processing.module", "core")
  }
}

shadowJar {
  mergeServiceFiles()
}

tasks.withType(JavaExec) {
  classpath += configurations.developmentOnly
  jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
  if (gradle.startParameter.continuous) {
    systemProperties(
        'micronaut.io.watch.restart': 'true',
        'micronaut.io.watch.enabled': 'true',
        "micronaut.io.watch.paths": "src/main"
    )
  }
}



